plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'net.minecraftforge.gradle'

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)

    java {
        modularity.inferModulePath = true
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    group = mod_group_id
    version = mod_version

    minecraft {
        mappings channel: "${mapping_channel}", version: "${mapping_version}"
    }

    dependencies {
        minecraft "net.minecraftforge:forge:1.20.1-47.3.12"
    }

    jar {
        archiveBaseName.set(mod_name);
    }

}

subprojects {
    sourceSets {
        main.resources {
            srcDirs += 'src/generated/resources'
        }
    }

    configurations {
        embed
        compile.extendsFrom(embed)
    }

    jar {
        destinationDirectory.set(file("${rootProject.projectDir}/build/libs"))
        from {
            configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
        } {
            exclude 'LICENSE.txt', 'META-INF/MANIFEST.MF', 'META-INF/maven/**', 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/mods.toml'
        }

    }

    tasks.named("jar").configure {
        finalizedBy("reobfJar")
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    subprojects.each { subproject ->
        from(zipTree(subproject.tasks.named('jar').get().archiveFile)) {
            exclude 'META-INF/**'
        }
    }

    into('META-INF') {
        from {
            def content = file("${rootProject.projectDir}/mods.toml").text.replaceAll(/\$\{(\w+)\}/) { full, key ->
                if (key == 'SIDE') return 'BOTH'
                return rootProject.properties[key] ?: full
            }
            project.resources.text.fromString(content)
        }
        rename { 'mods.toml' }
    }
}

